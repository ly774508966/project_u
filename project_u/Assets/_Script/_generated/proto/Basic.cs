// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basic.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from basic.proto</summary>
  public static partial class BasicReflection {

    #region Descriptor
    /// <summary>File descriptor for basic.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BasicReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtiYXNpYy5wcm90bxIFUHJvdG8aDGhlYWRlci5wcm90byJBCgRQaWtlEh0K",
            "BmhlYWRlchgBIAEoCzINLlByb3RvLkhlYWRlchIMCgRrZXkwGAIgASgFEgwK",
            "BGtleTEYAyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Pike), global::Proto.Pike.Parser, new[]{ "Header", "Key0", "Key1" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Pike : pb::IMessage<Pike> {
    private static readonly pb::MessageParser<Pike> _parser = new pb::MessageParser<Pike>(() => new Pike());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pike> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BasicReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pike() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pike(Pike other) : this() {
      Header = other.header_ != null ? other.Header.Clone() : null;
      key0_ = other.key0_;
      key1_ = other.key1_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pike Clone() {
      return new Pike(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Proto.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "key0" field.</summary>
    public const int Key0FieldNumber = 2;
    private int key0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key0 {
      get { return key0_; }
      set {
        key0_ = value;
      }
    }

    /// <summary>Field number for the "key1" field.</summary>
    public const int Key1FieldNumber = 3;
    private int key1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Key1 {
      get { return key1_; }
      set {
        key1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pike);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pike other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (Key0 != other.Key0) return false;
      if (Key1 != other.Key1) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (Key0 != 0) hash ^= Key0.GetHashCode();
      if (Key1 != 0) hash ^= Key1.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (Key0 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key0);
      }
      if (Key1 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Key1);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (Key0 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key0);
      }
      if (Key1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key1);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pike other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Proto.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.Key0 != 0) {
        Key0 = other.Key0;
      }
      if (other.Key1 != 0) {
        Key1 = other.Key1;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (header_ == null) {
              header_ = new global::Proto.Header();
            }
            input.ReadMessage(header_);
            break;
          }
          case 16: {
            Key0 = input.ReadInt32();
            break;
          }
          case 24: {
            Key1 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
